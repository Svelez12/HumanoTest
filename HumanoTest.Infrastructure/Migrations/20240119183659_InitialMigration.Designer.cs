// <auto-generated />
using HumanoTest.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HumanoTest.Infrastructure.Migrations
{
    [DbContext(typeof(HumanoTestDbContext))]
    [Migration("20240119183659_InitialMigration")]
    partial class InitialMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HumanoTest.Domain.Entities.PersonEntities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único de Entidad.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("int")
                        .HasColumnOrder(4)
                        .HasComment("Edad de Persona.");

                    b.Property<string>("IdentityNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)")
                        .HasColumnOrder(2)
                        .HasComment("Número de Documento de Identidad.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("Nombre de Persona.");

                    b.HasKey("Id");

                    b.HasIndex("IdentityNumber")
                        .IsUnique();

                    b.ToTable("Person", t =>
                        {
                            t.HasComment("Persona");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Age = 1,
                            IdentityNumber = "957709015",
                            Name = "Person 1"
                        },
                        new
                        {
                            Id = 2,
                            Age = 2,
                            IdentityNumber = "685407361",
                            Name = "Person 2"
                        },
                        new
                        {
                            Id = 3,
                            Age = 3,
                            IdentityNumber = "439924747",
                            Name = "Person 3"
                        },
                        new
                        {
                            Id = 4,
                            Age = 4,
                            IdentityNumber = "558433187",
                            Name = "Person 4"
                        },
                        new
                        {
                            Id = 5,
                            Age = 5,
                            IdentityNumber = "457098325",
                            Name = "Person 5"
                        },
                        new
                        {
                            Id = 6,
                            Age = 6,
                            IdentityNumber = "522865059",
                            Name = "Person 6"
                        },
                        new
                        {
                            Id = 7,
                            Age = 7,
                            IdentityNumber = "818066775",
                            Name = "Person 7"
                        },
                        new
                        {
                            Id = 8,
                            Age = 8,
                            IdentityNumber = "363201467",
                            Name = "Person 8"
                        },
                        new
                        {
                            Id = 9,
                            Age = 9,
                            IdentityNumber = "979061742",
                            Name = "Person 9"
                        });
                });

            modelBuilder.Entity("HumanoTest.Domain.Entities.PersonEntities.PersonContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único de Entidad.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(3)
                        .HasComment("Nombre de Contacto.");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(4)
                        .HasComment("Dato de Contacto");

                    b.Property<bool>("IsMainContact")
                        .HasColumnType("bit")
                        .HasColumnOrder(5)
                        .HasComment("Identifica si es el Contacto Principal del Cliente, True = Activo or False = Inactivo.");

                    b.Property<int>("PersonContactTypeId")
                        .HasColumnType("int")
                        .HasColumnOrder(2)
                        .HasComment("Tipo Contacto Persona");

                    b.Property<int>("PersonId")
                        .HasColumnType("int")
                        .HasColumnOrder(6)
                        .HasComment("Identificador de Persona.");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("PersonContactTypeId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonContact", t =>
                        {
                            t.HasComment("Contactos Persona");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ContactName = "Person 1",
                            Data = "Informacion de Contacto 1",
                            IsMainContact = false,
                            PersonContactTypeId = 1,
                            PersonId = 1
                        },
                        new
                        {
                            Id = 2,
                            ContactName = "Person 2",
                            Data = "Informacion de Contacto 2",
                            IsMainContact = false,
                            PersonContactTypeId = 2,
                            PersonId = 2
                        },
                        new
                        {
                            Id = 3,
                            ContactName = "Person 3",
                            Data = "Informacion de Contacto 3",
                            IsMainContact = false,
                            PersonContactTypeId = 3,
                            PersonId = 3
                        },
                        new
                        {
                            Id = 4,
                            ContactName = "Person 4",
                            Data = "Informacion de Contacto 4",
                            IsMainContact = false,
                            PersonContactTypeId = 4,
                            PersonId = 4
                        },
                        new
                        {
                            Id = 5,
                            ContactName = "Person 5",
                            Data = "Informacion de Contacto 5",
                            IsMainContact = false,
                            PersonContactTypeId = 5,
                            PersonId = 5
                        },
                        new
                        {
                            Id = 6,
                            ContactName = "Person 6",
                            Data = "Informacion de Contacto 6",
                            IsMainContact = false,
                            PersonContactTypeId = 6,
                            PersonId = 6
                        },
                        new
                        {
                            Id = 7,
                            ContactName = "Person 7",
                            Data = "Informacion de Contacto 7",
                            IsMainContact = false,
                            PersonContactTypeId = 7,
                            PersonId = 7
                        },
                        new
                        {
                            Id = 8,
                            ContactName = "Person 8",
                            Data = "Informacion de Contacto 8",
                            IsMainContact = false,
                            PersonContactTypeId = 8,
                            PersonId = 8
                        },
                        new
                        {
                            Id = 9,
                            ContactName = "Person 9",
                            Data = "Informacion de Contacto 9",
                            IsMainContact = false,
                            PersonContactTypeId = 9,
                            PersonId = 9
                        });
                });

            modelBuilder.Entity("HumanoTest.Domain.Entities.PersonEntities.PersonContactType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnOrder(1)
                        .HasComment("Identificador Único de Entidad.");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(600)
                        .HasColumnType("nvarchar(600)")
                        .HasColumnOrder(3)
                        .HasComment("Descripcion.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnOrder(2)
                        .HasComment("Nombre.");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("PersonContactType", t =>
                        {
                            t.HasComment("Entidad de Información de Tipo de Contacto Persona.");
                        });

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Description Of Contact Type 1",
                            Name = "Contact Type 1"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Description Of Contact Type 2",
                            Name = "Contact Type 2"
                        },
                        new
                        {
                            Id = 3,
                            Description = "Description Of Contact Type 3",
                            Name = "Contact Type 3"
                        },
                        new
                        {
                            Id = 4,
                            Description = "Description Of Contact Type 4",
                            Name = "Contact Type 4"
                        },
                        new
                        {
                            Id = 5,
                            Description = "Description Of Contact Type 5",
                            Name = "Contact Type 5"
                        },
                        new
                        {
                            Id = 6,
                            Description = "Description Of Contact Type 6",
                            Name = "Contact Type 6"
                        },
                        new
                        {
                            Id = 7,
                            Description = "Description Of Contact Type 7",
                            Name = "Contact Type 7"
                        },
                        new
                        {
                            Id = 8,
                            Description = "Description Of Contact Type 8",
                            Name = "Contact Type 8"
                        },
                        new
                        {
                            Id = 9,
                            Description = "Description Of Contact Type 9",
                            Name = "Contact Type 9"
                        });
                });

            modelBuilder.Entity("HumanoTest.Domain.Entities.PersonEntities.PersonContact", b =>
                {
                    b.HasOne("HumanoTest.Domain.Entities.PersonEntities.PersonContactType", "PersonContactType")
                        .WithMany()
                        .HasForeignKey("PersonContactTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HumanoTest.Domain.Entities.PersonEntities.Person", "Person")
                        .WithMany("Contacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Person");

                    b.Navigation("PersonContactType");
                });

            modelBuilder.Entity("HumanoTest.Domain.Entities.PersonEntities.Person", b =>
                {
                    b.Navigation("Contacts");
                });
#pragma warning restore 612, 618
        }
    }
}
